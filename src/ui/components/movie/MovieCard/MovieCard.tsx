interface Movie { id: number; title: string; year: number; posterPath?: string; trailerUrl?: string; } interface MovieCardProps { movie: Movie; isSelected: boolean; onSelect: () => void; downloadProgress?: number; } export default function MovieCard({ movie, isSelected, onSelect, downloadProgress }: MovieCardProps) { return ( <div className="relative group"> <div className={`absolute inset-0 rounded-lg transition-colors ${isSelected ? "bg-theme-blue bg-opacity-50" : "bg-transparent group-hover:bg-theme-dark group-hover:bg-opacity-50"}`} /> <div className="relative p-4 rounded-lg border border-theme-dark"> <div className="aspect-[2/3] mb-2 relative"> {movie.posterPath ? ( <img src={movie.posterPath} alt={movie.title} className="w-full h-full object-cover rounded" /> ) : ( <div className="w-full h-full bg-theme-dark rounded flex items-center justify-center"> <span className="text-theme-light">No Poster</span> </div> )} {typeof downloadProgress === "number" && ( <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center"> <div className="w-16 h-16 relative"> <svg className="w-full h-full" viewBox="0 0 36 36"> <path d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke="white" strokeWidth="3" strokeDasharray={`${downloadProgress}, 100`} /> </path> <text x="50%" y="50%" textAnchor="middle" dy=".3em" className="fill-white text-sm"> {Math.round(downloadProgress)}% </text> </svg> </div> </div> )} </div> <div className="flex items-start justify-between"> <div> <h3 className="text-theme-light font-semibold truncate">{movie.title}</h3> <p className="text-sm text-theme-light text-opacity-70">{movie.year}</p> </div> <input type="checkbox" checked={isSelected} onChange={onSelect} className="mt-1 w-4 h-4 rounded border-theme-dark text-theme-blue focus:ring-theme-blue" /> </div> {movie.trailerUrl && ( <div className="mt-2 text-sm text-green-500">Trailer Available</div> )} </div> </div> ); }
